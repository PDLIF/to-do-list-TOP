{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/global","webpack://to-do-list/webpack/runtime/publicPath","webpack://to-do-list/./src/task-module/Task.js","webpack://to-do-list/./src/project-module/Project.js","webpack://to-do-list/./src/task-manager-module/TaskManager.js","webpack://to-do-list/./src/dom-controller-module/DOMController.js","webpack://to-do-list/./src/app-module/App.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export const Task = function(title, description, dueDate, priority, project, isImportant) {\n    \n    function getTitle() {\n        return title;\n    }\n\n    function setTitle(newTitle) {\n        title = newTitle;\n    }\n\n    function getDescription() {\n        return description;\n    }\n\n    function setDescription(newDescription) {\n        description = newDescription;\n    }\n\n    function getDueDate() {\n        return dueDate;\n    }\n\n    function setDueDate(newDueDate) {\n        dueDate = newDueDate;\n    }\n\n    function getPriority() {\n        return priority;\n    }\n\n    function setPriority(newPriority) {\n        priority = newPriority;\n    }\n\n    function getProject() {\n        return project;\n    }\n\n    function setProject(newProject) {\n        project = newProject;\n    }\n\n    function serialize() {\n        return {title, description, dueDate, priority, project, isImportant}\n    }\n\n    function getIsImportant() {\n        return isImportant;\n    }\n\n    function setIsImportant(value) {\n        isImportant = value;\n    }\n\n    return { getTitle, setTitle, getDescription, setDescription, getDueDate, setDueDate, getPriority, setPriority, getProject, setProject, getIsImportant, setIsImportant, serialize }\n}","export const Project = function (title) {\n    const tasks = [];\n\n    function getTitle() {\n        return title;\n    }\n\n    function getTasks() {\n        return tasks;\n    }\n\n    function addTask(task) {\n        tasks.push(task);\n    }\n\n    function setTitle(newTitle) {\n        title = newTitle();\n    }\n\n    function findTask(title) {\n        return tasks.find(task => task.getTitle() === title);\n    }\n\n    function deleteTask(task) {\n        const index = tasks.indexOf(task);\n        tasks.splice(index, 1);\n    }\n\n    function serializeProject() {\n        return {title, tasks: tasks.map(task => task.serialize())}\n    }\n    \n\n    return { getTitle, getTasks, addTask, setTitle, findTask, deleteTask, serializeProject }\n}","export const TaskManager = (function () {\n    const allTasks = [];\n    const allProjects = [];\n    const importantTasks = [];\n\n    allProjects.forEach(project => {\n        const projectTasks = project.getTasks();\n        projectTasks.forEach(task => {\n            allTasks.push(task);\n        })\n    })\n\n    function getAllProjects() {\n        return allProjects;\n    }\n\n    function getAllTasks() {\n        return allTasks;\n    }\n\n    function clearAllTasks() {\n        allTasks.splice(0, allTasks.length);\n    }\n\n    function clearAllProjects() {\n        allProjects.splice(0, allProjects.length);\n    }\n\n    function clearImportantTasks() {\n        importantTasks.splice(0, importantTasks.length);\n    }\n    \n    function getImportantTasks() {\n        return importantTasks;\n    }\n\n    function addProject(project) {\n        allProjects.push(project);\n        \n        const projectTasks = project.getTasks();\n        projectTasks.forEach(task => allTasks.push(task));\n    }\n\n    function addTaskToAll(task) {\n        allTasks.push(task)\n    }\n    \n    function addTask(task, project) {\n        project.getTasks().push(task);\n    }\n\n    function addImportantTask(task) {\n        importantTasks.push(task);\n        task.setIsImportant(true);\n    }\n\n    function deleteProject(projectTitle) {\n        const projectToDelete = findProject(projectTitle);\n\n        const projectTasks = projectToDelete.getTasks();\n        projectTasks.forEach(task => deleteTask(task, projectToDelete));\n\n        const projectToDeleteIndex = allProjects.findIndex((p) => p.getTitle() === projectToDelete.getTitle());\n        allProjects.splice(projectToDeleteIndex, 1);\n    }\n\n    function deleteTask(task, project) {\n        const tasks = project.getTasks();\n        const index = tasks.findIndex((t) => t.getTitle() === task.getTitle());\n        \n        if (index !== -1) {\n            project.getTasks().splice(index, 1);\n        } else {\n            console.log('error');\n        }\n    }\n\n    function deleteImportantTask(task) {\n        const index = importantTasks.findIndex((t) => t.getTitle() === task.getTitle());\n\n        importantTasks.splice(index, 1);\n        task.setIsImportant(true);\n    }\n\n    function findProject(projectTitle) {\n        return allProjects.find(project => project.getTitle() === projectTitle);\n    }\n\n    function findTask(taskName) {\n        for (const project of allProjects) {\n            const task = project.getTasks().find((task) => task.getTitle() === taskName);\n            if (task) {\n                return task; // Return the matching task directly\n            }\n        }\n        return 'task not found'; // Return null if no task is found\n    }\n\n    function isImportant(task) {\n        return importantTasks.some(t => t.getTitle() === task.getTitle());\n    }\n\n    return { getAllProjects, getAllTasks, getImportantTasks, addProject, addTask, clearAllTasks, clearAllProjects, clearImportantTasks, addImportantTask, deleteProject, deleteTask, deleteImportantTask, findProject, findTask, isImportant, addTaskToAll }\n})();\n\n","import { TaskManager } from \"../task-manager-module/TaskManager\";\nimport { Project } from '../project-module/Project';\nimport { Task } from '../task-module/Task';\n\nimport projectDeleteIconPath from '../assets/delete-project-btn/delete-project-icon.svg';\n\nexport const DOMController = (function () {\n    const projectsList = document.querySelector('.projects-list');\n    const tasksList = document.querySelector('.tasks-list');\n    const homeAndProjectsLists = document.querySelectorAll('.home-list, .projects-list');\n    \n    const addTaskForm = document.querySelector(\".add-task-form\");\n    const addProjectForm = document.querySelector(\".add-project-form\");\n    const editTaskForm = document.querySelector(\".edit-task-form\");\n    \n    const addTaskFormModal = document.querySelector(\".add-task-form-dialog\");\n    const addProjectFormModal = document.querySelector(\".add-project-form-dialog\");\n    const editTaskFormModal = document.querySelector(\".edit-task-form-dialog\");\n\n    const addTaskFormModalExitBtn = document.querySelector('.add-task-form-dialog .form-exit-btn');\n    const editTaskFormModalExitBtn = document.querySelector('.edit-task-form-dialog .form-exit-btn');\n    const addProjectFormModalExitBtn = document.querySelector('.add-project-form-dialog .form-exit-btn');\n\n    const allTasksTab = document.querySelector('.all-tasks-tab');\n    const todayTasksTab = document.querySelector('.today-tasks-tab');\n    const thisWeekTasksTab = document.querySelector('.this-week-tab');\n    const importantTasksTab = document.querySelector('.important-tab');\n\n    const addTaskBtn = document.querySelector(\".add-task-btn\");\n    const addProjectBtn = document.querySelector(\".add-project-btn\");\n\n    function rebuildProject(data) {\n        const tasks = data.tasks || [];\n        const project = Project(data.title);\n\n        data.tasks.forEach(taskData => {\n            const task = rebuildTask(taskData, project);\n            project.addTask(task);\n        });\n\n        return project;\n    }\n\n    function rebuildTask(data, parentProject) {\n        const rebuildParentProject = parentProject;\n        return Task(data.title, data.description, data.dueDate, data.priority, rebuildParentProject, data.isImportant);\n    }\n\n    \n\n    function saveToLocalStorage() {\n        const projects = TaskManager.getAllProjects(); // Assuming TaskManager holds your projects and tasks.\n        const serializedData = projects.map(project => project.serializeProject());\n        localStorage.setItem('todoAppData', JSON.stringify(serializedData)); // Save to localStorage.\n    }\n\n    function loadFromLocalStorage() {\n        const data = localStorage.getItem('todoAppData');\n        if (!data) return [];\n    \n        const parsedData = JSON.parse(data); // Plain objects\n        return parsedData.map(rebuildProject); // Rebuild as Project objects\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => {\n        const projects = loadFromLocalStorage();\n        renderProjects(projects);\n\n        TaskManager.clearAllProjects();\n        TaskManager.clearAllTasks();\n\n        projects.forEach(project => TaskManager.addProject(project));\n\n        DOMController.renderProjects(TaskManager.getAllProjects());\n        DOMController.updateProjectDropdown(TaskManager.getAllProjects());\n        renderAllTasks();\n    });\n\n    // adding a DOM project element to the sidebar\n    function addProjectTab(project) {\n        const projectBtn = document.createElement('li');\n        projectBtn.classList.add('tab', 'projects-list-tab');\n        projectBtn.setAttribute('data-title', project.getTitle());\n\n        const title = document.createElement('p');\n        title.classList.add('project-title');\n        title.textContent = project.getTitle();\n\n        const projectDeleteBtn = document.createElement('div');\n        projectDeleteBtn.classList.add('project-delete-btn');\n\n        const projectDeleteIcon = document.createElement('img');\n        projectDeleteIcon.classList.add('project-delete-icon');\n        projectDeleteIcon.src = projectDeleteIconPath;\n\n        projectDeleteBtn.appendChild(projectDeleteIcon);\n        projectBtn.appendChild(title);\n        projectBtn.appendChild(projectDeleteBtn);\n        projectsList.appendChild(projectBtn);\n\n        projectDeleteBtn.addEventListener('click', (event) => {\n            const projectTab = event.currentTarget.closest('.tab');\n            const projectTitle = projectTab.dataset.title;\n            TaskManager.deleteProject(projectTitle);\n            projectTab.remove();\n\n            saveToLocalStorage();\n        });\n    }\n    \n    // adding a DOM task element\n    function addTaskDiv(task) {\n        const taskDiv = document.createElement('div');\n        taskDiv.classList.add('task-div');\n        taskDiv.setAttribute('data-title', task.getTitle());\n        taskDiv.setAttribute('data-project', task.getProject().getTitle());\n\n        const heading = createTaskHeading(task);\n        const description = createTaskDescription(task);\n        const dueDateWrapper = createTaskDueDateMarker(task);\n        const priorityWrapper = createTaskPriorityMarker(task);\n        const importantBtn = createTaskImportantBtn(task);\n        const dropdownMenu = createTaskOptions();\n\n        taskDiv.appendChild(heading);\n        taskDiv.appendChild(description);\n        taskDiv.appendChild(dueDateWrapper);\n        taskDiv.appendChild(importantBtn);\n        taskDiv.appendChild(dropdownMenu);\n        \n        if (priorityWrapper !== null) {\n            taskDiv.appendChild(priorityWrapper);\n        }\n\n        tasksList.appendChild(taskDiv);\n    }\n\n    function createTaskHeading(task) {\n        const heading = document.createElement('div');\n        heading.classList.add('heading');\n\n        const title = document.createElement('h3');\n        title.classList.add('task-title');\n        title.textContent = task.getTitle();\n\n        const parentProject = document.createElement('p');\n        parentProject.classList.add('project-title');\n        const parentProjectTitle = task.getProject().getTitle();\n        parentProject.textContent = `Project: ${parentProjectTitle}`;\n\n        const description = document.createElement('p');\n        description.classList.add('description');\n        description.textContent = task.getDescription();\n\n        heading.appendChild(title);\n        heading.appendChild(parentProject);\n\n        return heading;\n    }\n\n    function createTaskDescription(task) {\n        const description = document.createElement('p');\n        description.classList.add('description');\n        description.textContent = task.getDescription();\n\n        return description;\n    }\n    \n    function createTaskDueDateMarker(task) {\n        const dueDateWrapper = document.createElement('div');\n        dueDateWrapper.classList.add('due-date-wrapper');\n        const dueDate = document.createElement('p');\n        dueDate.classList.add('due-date');\n        dueDate.textContent = task.getDueDate();\n        dueDateWrapper.appendChild(dueDate);\n\n        return dueDateWrapper;\n    }\n\n    function createTaskImportantBtn(task) {\n        const importantBtn = document.createElement('div');\n        importantBtn.classList.add('important-btn');\n\n        setTaskImportantBtn(task, importantBtn);\n\n        importantBtn.addEventListener('click', () => {\n            // const taskIndex = TaskManager.isImportant(task);\n            const isImportant = task.getIsImportant();\n    \n            if (isImportant === false) {\n                // Task is not in favourites, add it\n                TaskManager.addImportantTask(task);\n                task.setIsImportant(true);\n            } else {\n                // Task is already in favourites, remove it\n                TaskManager.deleteImportantTask(task);\n                task.setIsImportant(false);\n            }\n    \n            importantBtn.classList.toggle('active');\n            saveToLocalStorage();\n        });\n\n        return importantBtn;\n    }\n\n    function createTaskPriorityMarker(task) {\n        const priorityWrapper = document.createElement('div');\n        priorityWrapper.classList.add('priority-wrapper');\n        const priority = document.createElement('p');\n        priority.classList.add('priority');\n\n        const priorityValue = task.getPriority();\n        priority.textContent = priorityValue;\n\n        switch (priorityValue) {\n            case 'Low':\n                priorityWrapper.classList.add('low-priority');\n                break;\n            case 'Medium':\n                priorityWrapper.classList.add('medium-priority');\n                break;\n            case 'High':\n                priorityWrapper.classList.add('high-priority');\n                break;\n            case 'Critical':\n                priorityWrapper.classList.add('critical-priority');\n                break;\n            case 'None':\n                return null;\n            case '':\n                return null;\n        }\n\n        priorityWrapper.appendChild(priority);\n\n        return priorityWrapper;\n    }\n\n    function createTaskOptions() {\n        const optionsWrapper = document.createElement('div');\n        optionsWrapper.classList.add('task-options-wrapper');\n        \n        const optionsBtn = document.createElement('div');\n        optionsBtn.classList.add('task-options-btn');\n        optionsBtn.textContent = '⋮';\n        \n        const dropdownContainer = document.createElement(\"div\");\n        dropdownContainer.classList.add(\"task-options-container\");\n        \n        const options = [\n            {\n                label: \"Edit\",\n                onClick: (event) => openEditForm(event)\n            },\n            {\n                label: \"Delete\",\n                onClick: (event) => handleDeleteTask(event)\n            }\n        ];\n        \n        options.forEach(option => {\n            const optionElement = document.createElement(\"div\");\n            optionElement.classList.add(\"dropdown-option\");\n            optionElement.textContent = option.label;\n            optionElement.addEventListener(\"click\", option.onClick);\n            dropdownContainer.append(optionElement);\n        });\n\n        optionsBtn.addEventListener('click', () => {\n            dropdownContainer.classList.toggle('show');\n        });\n\n        document.addEventListener('click', (event) => {\n            if (!dropdownContainer.contains(event.target) && !optionsBtn.contains(event.target)) {\n                dropdownContainer.classList.remove('show');\n            }\n        });\n\n        optionsWrapper.appendChild(optionsBtn);\n        optionsWrapper.appendChild(dropdownContainer);\n        \n        return optionsWrapper;\n    }\n    \n    function updateTaskData(task, updates) {\n        if (!task) {\n            console.error(`Task with name ${task.getTitle()} not found.`);\n            return null;\n        }\n        \n        task.setTitle(updates.title);\n        task.setDescription(updates.description);\n        task.setDueDate(updates.dueDate);\n        task.setPriority(updates.priority);\n        task.setProject(updates.project);\n\n        return task;\n    }\n\n    function updateTaskUI(oldTaskId, newTaskId) {\n        const taskDiv = document.querySelector(`[data-title=\"${oldTaskId}\"]`);\n        taskDiv.innerHTML = '';\n\n        const task = TaskManager.findTask(newTaskId);\n        const taskTitle = task.getTitle();\n        taskDiv.setAttribute('data-title', taskTitle);\n        \n        if (!taskDiv) {\n            console.error(`Task element with ID ${newTaskId} not found.`);\n            return;\n        }\n\n        const heading = createTaskHeading(task);\n        const description = createTaskDescription(task);\n        const dueDateWrapper = createTaskDueDateMarker(task);\n        const priorityWrapper = createTaskPriorityMarker(task);\n        const importantBtn = createTaskImportantBtn(task);\n        const dropdownMenu = createTaskOptions();\n\n        taskDiv.appendChild(heading);\n        taskDiv.appendChild(description);\n        taskDiv.appendChild(dueDateWrapper);\n        taskDiv.appendChild(importantBtn);\n        taskDiv.appendChild(dropdownMenu);\n\n        if (priorityWrapper !== null) {\n            taskDiv.appendChild(priorityWrapper);\n        }\n    }\n\n    function editTaskFormSubmit(event) {\n        event.preventDefault();\n\n        const currentTask = editTaskForm.currentTask;\n        const oldTitle = currentTask.getTitle();\n        const newTaskTitle = editTaskForm.elements.title.value;\n\n        const oldProject = currentTask.getProject(); //deleting the task from old project\n        oldProject.deleteTask(currentTask);\n        \n        const newParentProjectTitle = editTaskForm.elements.project.value;\n        const newParentProject = TaskManager.findProject(newParentProjectTitle);\n    \n        // Update task data\n        const updatedTask = updateTaskData(currentTask, {\n            title: editTaskForm.elements.title.value,\n            description: editTaskForm.elements.description.value,\n            dueDate: editTaskForm.elements.dueDate.value,\n            priority: editTaskForm.elements.options.value,\n            project: newParentProject\n        });\n\n        newParentProject.addTask(updatedTask);\n    \n        if (updatedTask) {\n            // Update UI\n            updateTaskUI(oldTitle, newTaskTitle);\n        }\n    \n        // Hide modal\n        editTaskFormModal.close();\n        saveToLocalStorage();\n    }\n\n    function handleDeleteTask(event) {\n        const currentTaskDiv = event.currentTarget.closest('.task-div');\n        const taskTitle = currentTaskDiv.dataset.title;\n        const taskProject = currentTaskDiv.dataset.project;\n\n        const task = TaskManager.findTask(taskTitle);\n        const project = TaskManager.findProject(taskProject);\n\n        TaskManager.deleteTask(task, project);\n        currentTaskDiv.remove();\n        \n        saveToLocalStorage();\n    }\n\n    function openEditForm(event) {\n        editTaskFormModal.showModal();\n\n        const currentTaskDiv = event.currentTarget.closest('.task-div');\n\n        const taskTitle = currentTaskDiv.dataset.title;\n\n        const task = TaskManager.findTask(taskTitle);\n\n        const titleField = document.querySelector('.edit-task-form .task-title-input');\n        const descriptionField = document.querySelector('.edit-task-form .description-input');\n        const dueDateField = document.querySelector('.edit-task-form .due-date');\n        const priorityField = document.querySelector('.edit-task-form .priority');\n        const parentProjectField = document.querySelector('.edit-task-form .project-select');\n\n        titleField.value = task.getTitle();\n        descriptionField.value = task.getDescription();\n        dueDateField.value = task.getDueDate();\n        priorityField.value = task.getPriority();\n        parentProjectField.value = task.getProject().getTitle();\n\n        editTaskForm.currentTask = task;\n    }\n    \n    function addProjectFormSubmit(event) {\n        event.preventDefault();\n        \n        const title = document.querySelector('.project-title-input').value;\n        const existingProject = TaskManager.getAllProjects().find(project => project.getTitle() === title);\n\n        if (existingProject) {\n            alert('A project with this title already exists. Please choose a different title.');\n            return;\n        }\n        \n        const project = Project(title);\n        TaskManager.addProject(project);\n        addProjectFormModal.close();\n        \n        DOMController.renderProjects(TaskManager.getAllProjects());\n        DOMController.updateProjectDropdown(TaskManager.getAllProjects());\n    }\n    \n    function addTaskFormSubmit(event) {\n        event.preventDefault();\n        \n        const projects = TaskManager.getAllProjects();\n\n        const title = document.querySelector('.add-task-form .task-title-input').value;\n        const description = document.querySelector('.add-task-form .description-input').value;\n        const dueDate = document.querySelector('.add-task-form .due-date').value;\n        const priority = document.querySelector('.add-task-form .priority').value;\n        const selectedProjectTitle = document.querySelector('.add-task-form .project-select').value;\n        const selectedProject = TaskManager.findProject(selectedProjectTitle);\n\n        const existingTask = projects.some(project => {\n            return project.getTasks().some(task => task.getTitle() === title);\n        });\n\n        if (existingTask) {\n            alert('A project with this title already exists. Please choose a different title.');\n            return;\n        }\n\n        const task = Task(title, description, dueDate, priority, selectedProject);\n        TaskManager.addTask(task, selectedProject);\n\n        const projectTab = document.querySelector(`.tab[data-title='${selectedProjectTitle}']`);\n\n        if (projectTab && projectTab.classList.contains('active')) {\n            const tasks = selectedProject.getTasks();\n            DOMController.renderTasks(tasks);\n        } else {\n            const task = Task(title, description, dueDate, priority, selectedProject);\n            DOMController.renderAllTasks(selectedProject);\n            const allTasksTab = document.querySelector('.all-tasks-tab');\n            DOMController.makeTabActive(allTasksTab);\n        }\n\n        addTaskFormModal.close();\n    }\n\n    // render projects in the sidebar\n    function renderProjects(projects) {\n        projectsList.innerHTML = ''; \n        projects.forEach(addProjectTab);\n    }\n\n    // display all tasks\n    function renderAllTasks() {\n        tasksList.innerHTML = ''; \n\n        const projects = TaskManager.getAllProjects();\n        projects.forEach(project => {\n            const tasks = project.getTasks();\n            tasks.forEach(addTaskDiv);\n        });\n\n        DOMController.makeTabActive(allTasksTab);\n    }\n\n\n    function isTodayTask(task) {\n        const todayDate = new Date();\n        const taskDate = new Date(task.getDueDate());\n\n        return (\n            todayDate.getFullYear() === taskDate.getFullYear() &&\n            todayDate.getMonth() === taskDate.getMonth() &&\n            todayDate.getDate() === taskDate.getDate()\n        );\n    }\n\n    function isThisWeekTask(task) {\n        const today = new Date();\n        const taskDate = new Date(task.getDueDate());\n    \n        const startOfWeek = new Date(today);\n        startOfWeek.setDate(today.getDate() - today.getDay());\n    \n        const endOfWeek = new Date(today);\n        endOfWeek.setDate(today.getDate() + (6 - today.getDay()));\n    \n        return taskDate >= startOfWeek && taskDate <= endOfWeek;\n    }\n\n\n    function renderTodayTasks() {\n        tasksList.innerHTML = '';\n        const projects = TaskManager.getAllProjects();\n\n        projects.forEach(project => {\n            const projectTasks = project.getTasks();\n            projectTasks.forEach(task => {\n                const isToday = isTodayTask(task);\n                if (isToday) {\n                    addTaskDiv(task);\n                }\n            })\n        })\n    }\n    \n    function renderThisWeekTasks() {\n        tasksList.innerHTML = '';\n        const projects = TaskManager.getAllProjects();\n\n        projects.forEach(project => {\n            const projectTasks = project.getTasks();\n            projectTasks.forEach(task => {\n                const isThisWeek = isThisWeekTask(task);\n                if (isThisWeek) {\n                    addTaskDiv(task);\n                }\n            })\n        })\n    }\n\n    function renderImportantTasks() {\n        tasksList.innerHTML = '';\n\n        const importantTasks = TaskManager.getAllTasks().filter(task => task.getIsImportant() === true);\n        importantTasks.forEach(task => {\n            addTaskDiv(task);\n        });\n    }\n\n    function setTaskImportantBtn(task, btn) {\n        const isImportant = task.getIsImportant();\n\n        if (isImportant === true) {\n            task.setIsImportant(true);\n            btn.classList.add('active');\n        } else {\n            task.setIsImportant(false);\n            btn.classList.remove('active');\n        }\n    }\n    \n    // render specific group of tasks (e.g. today tasks or tasks which belong to a specific project)\n    function renderTasks(tasks) {\n        tasksList.innerHTML = ''; \n        tasks.forEach(addTaskDiv);\n    }\n\n    // render add and edit forms' dropdowns for project selection\n    function updateProjectDropdown(projects) {\n        const addFormProjectSelect = document.querySelector('.add-task-form .project-select');\n        const editFormProjectSelect = document.querySelector('.edit-task-form .project-select');\n\n        addFormProjectSelect.innerHTML = ''; // Clear existing options\n        editFormProjectSelect.innerHTML = ''; // Clear existing options\n    \n        projects.forEach((project) => {\n            const addOption = document.createElement('option');\n            addOption.value = project.getTitle(); // Assuming getTitle() returns a unique value\n            addOption.textContent = project.getTitle();\n            addFormProjectSelect.appendChild(addOption);\n            \n            // Create a separate option for edit-task-form\n            const editOption = document.createElement('option');\n            editOption.value = project.getTitle(); // Assuming getTitle() returns a unique value\n            editOption.textContent = project.getTitle();\n            editFormProjectSelect.appendChild(editOption);\n        });\n    }\n\n    // make all tabs in sidebar inactive\n    function deactivateTabs(className) {\n        document.querySelectorAll(`${className}`).forEach((btn) => {\n            btn.classList.remove('active'); // Remove 'active' from all buttons\n        });\n    }\n\n    // make a specific tab active\n    function makeTabActive(tab) {\n        DOMController.deactivateTabs('.side-menu .tab');\n        tab.classList.add('active');\n    }\n    \n    // add project form submition\n    addProjectForm.addEventListener('submit', (event) => {       \n        addProjectFormSubmit(event);\n        saveToLocalStorage();\n        addProjectForm.reset();\n    });\n    \n    // add task form submition\n    addTaskForm.addEventListener('submit', (event) => {\n        addTaskFormSubmit(event);\n        saveToLocalStorage();\n        addTaskForm.reset();\n    });\n    \n    editTaskForm.addEventListener(\"submit\", (event) => {\n        editTaskFormSubmit(event);\n        saveToLocalStorage();\n        editTaskForm.reset();\n    });\n\n    // adding event listeners to tabs and buttons in the sidebar\n    allTasksTab.addEventListener('click', () => {\n        renderAllTasks();\n    });\n\n    todayTasksTab.addEventListener('click', () => {\n        renderTodayTasks();\n    });\n\n    thisWeekTasksTab.addEventListener('click', () => {\n        renderThisWeekTasks();\n    });\n\n    importantTasksTab.addEventListener('click', () => {\n        renderImportantTasks();\n    });\n\n    addTaskBtn.addEventListener(\"click\", () => {\n        addTaskFormModal.showModal();\n    });\n\n    addProjectBtn.addEventListener(\"click\", () => {\n        addProjectFormModal.showModal();\n    });\n\n    addTaskFormModalExitBtn.addEventListener('click', () => {\n        addTaskFormModal.close();\n        addTaskForm.reset();\n    });\n\n    editTaskFormModalExitBtn.addEventListener('click', () => {\n        editTaskFormModal.close();\n        editTaskForm.reset();\n    });\n\n    addProjectFormModalExitBtn.addEventListener('click', () => {\n        addProjectFormModal.close();\n        editTaskForm.reset();\n    });\n\n    addTaskFormModal.addEventListener(\"click\", (event) => {\n        // Close the modal if the click is outside the modal content\n        if (!addTaskForm.contains(event.target)) {\n            addTaskFormModal.close();\n        }\n      });\n\n      editTaskFormModal.addEventListener(\"click\", (event) => {\n        // Close the modal if the click is outside the modal content\n        if (!editTaskForm.contains(event.target)) {\n            editTaskFormModal.close();\n        }\n      });\n\n      addProjectFormModal.addEventListener(\"click\", (event) => {\n        // Close the modal if the click is outside the modal content\n        if (!addProjectForm.contains(event.target)) {\n            addProjectFormModal.close();\n        }\n      });\n\n    // making a clicked tab active\n    homeAndProjectsLists.forEach(list => {\n        list.addEventListener('click', event => {\n            const clickedTab = event.target.closest('.tab');\n            if (clickedTab) {\n                DOMController.makeTabActive(clickedTab);\n            }\n        });\n    });\n\n    projectsList.addEventListener('click', (event) => {\n        const clickedElement = event.target;\n        const projectTitleElement = event.target.closest('.project-title');\n        const projectTab = event.target.closest('.tab'); // Find the closest project tab\n        const projectDeleteBtn = event.target.closest('.project-delete-btn'); // Find the closest project tab\n\n        if (clickedElement === projectTitleElement ||\n            clickedElement === projectTab) {\n            const projectTitle = projectTab.getAttribute('data-title');\n            const project = TaskManager.findProject(projectTitle);\n            DOMController.renderTasks(project.getTasks());\n        }\n    });\n\n    return { addProjectTab, addTaskDiv, renderProjects, renderAllTasks, renderTasks, updateProjectDropdown, deactivateTabs, makeTabActive }\n})();\n","import { Task } from '../task-module/Task'\nimport { Project } from '../project-module/Project'\nimport { TaskManager } from '../task-manager-module/TaskManager'\nimport { DOMController } from '../dom-controller-module/DOMController'\n\nexport const App = (function () {\n    function initialize() {\n        const allProjects = TaskManager.getAllProjects();\n        const defaultProject = Project('Default Project');\n        const newProject = Project('New Project');\n        const testTask = Task(\"Sample Task\", \"Hey there! I'm a sample task created specifically for demonstrating that the functionality works as expected.\", \"2024-12-20\", \"Low\", defaultProject);\n\n        TaskManager.addProject(defaultProject);\n        TaskManager.addProject(newProject);\n        TaskManager.addTask(testTask, defaultProject);\n\n        DOMController.renderTasks(defaultProject.getTasks());\n        DOMController.renderProjects(allProjects);\n        DOMController.updateProjectDropdown(TaskManager.getAllProjects());\n    }\n    \n    return { initialize }\n})();","import './style.css'\nimport { App } from './app-module/App.js'\n\nApp.initialize();"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","Task","title","description","dueDate","priority","project","isImportant","getTitle","setTitle","newTitle","getDescription","setDescription","newDescription","getDueDate","setDueDate","newDueDate","getPriority","setPriority","newPriority","getProject","setProject","newProject","getIsImportant","setIsImportant","value","serialize","Project","tasks","getTasks","addTask","task","push","findTask","find","deleteTask","index","indexOf","splice","serializeProject","map","TaskManager","allTasks","allProjects","importantTasks","findIndex","t","console","log","findProject","projectTitle","forEach","getAllProjects","getAllTasks","getImportantTasks","addProject","clearAllTasks","clearAllProjects","clearImportantTasks","addImportantTask","deleteProject","projectToDelete","projectToDeleteIndex","deleteImportantTask","taskName","some","addTaskToAll","DOMController","projectsList","querySelector","tasksList","homeAndProjectsLists","querySelectorAll","addTaskForm","addProjectForm","editTaskForm","addTaskFormModal","addProjectFormModal","editTaskFormModal","addTaskFormModalExitBtn","editTaskFormModalExitBtn","addProjectFormModalExitBtn","allTasksTab","todayTasksTab","thisWeekTasksTab","importantTasksTab","addTaskBtn","addProjectBtn","rebuildProject","data","taskData","parentProject","rebuildParentProject","rebuildTask","saveToLocalStorage","serializedData","localStorage","setItem","JSON","stringify","addProjectTab","projectBtn","createElement","classList","add","setAttribute","textContent","projectDeleteBtn","projectDeleteIcon","appendChild","addEventListener","event","projectTab","currentTarget","closest","dataset","remove","addTaskDiv","taskDiv","heading","createTaskHeading","createTaskDescription","dueDateWrapper","createTaskDueDateMarker","priorityWrapper","createTaskPriorityMarker","importantBtn","createTaskImportantBtn","dropdownMenu","createTaskOptions","parentProjectTitle","btn","setTaskImportantBtn","toggle","priorityValue","optionsWrapper","optionsBtn","dropdownContainer","label","onClick","showModal","taskTitle","titleField","descriptionField","dueDateField","priorityField","parentProjectField","currentTask","openEditForm","currentTaskDiv","taskProject","handleDeleteTask","option","optionElement","append","contains","target","renderProjects","projects","innerHTML","renderAllTasks","makeTabActive","getItem","parse","loadFromLocalStorage","updateProjectDropdown","preventDefault","alert","close","addProjectFormSubmit","reset","selectedProjectTitle","selectedProject","renderTasks","addTaskFormSubmit","oldTitle","newTaskTitle","elements","newParentProjectTitle","newParentProject","updatedTask","updates","options","error","oldTaskId","newTaskId","updateTaskUI","editTaskFormSubmit","isToday","todayDate","Date","taskDate","getFullYear","getMonth","getDate","isTodayTask","isThisWeek","today","startOfWeek","setDate","getDay","endOfWeek","isThisWeekTask","filter","list","clickedTab","clickedElement","projectTitleElement","getAttribute","addFormProjectSelect","editFormProjectSelect","addOption","editOption","deactivateTabs","className","tab","defaultProject","testTask","App"],"sourceRoot":""}